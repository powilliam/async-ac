{"version":3,"file":"index.a48d49bb.js","sources":["../../vite/modulepreload-polyfill","../../src/themes/dark.ts","../../src/constants/icon.ts","../../src/components/menu.tsx","../../src/components/auto-complete.tsx","../../src/hooks/use-autocomplete-state.ts","../../src/components/async-auto-complete.tsx","../../src/hooks/use-service.ts","../../src/App.tsx","../../src/utils/promise.ts","../../src/main.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { extendTheme } from \"@chakra-ui/react\";\n\nexport const theme = extendTheme({\n  config: {\n    initialColorMode: \"dark\",\n    useSystemColorMode: true,\n  },\n});\n","export const SMALL_ICON_SIZE = {\n  w: \"12px\",\n  h: \"12px\",\n};\n\nexport const DEFAULT_ICON_SIZE = {\n  w: \"16px\",\n  h: \"16px\",\n};\n","import { forwardRef, ForwardedRef } from \"react\";\nimport { Box, Button, BoxProps } from \"@chakra-ui/react\";\n\nimport { Option } from \"../@types/option\";\n\nexport interface MenuProps extends BoxProps {\n  isOpen?: boolean;\n  options?: Option<any>[];\n  onSelectOption?(option: Option<any>): void;\n}\n\nfunction MenuComponent(\n  {\n    isOpen = false,\n    options = [],\n    onSelectOption = () => {},\n    ...rest\n  }: MenuProps,\n  ref: ForwardedRef<HTMLDivElement>\n) {\n  return (\n    <>\n      {isOpen && (\n        <Box\n          ref={ref}\n          position=\"absolute\"\n          top=\"100%\"\n          my=\"6px\"\n          width=\"100%\"\n          boxSizing=\"border-box\"\n          borderRadius=\"6px\"\n          boxShadow=\"0 0 0 1px hsl(0deg 0% 0% / 10%), 0 4px 11px hsl(0deg 0% 0% / 10%)\"\n          background=\"gray.700\"\n          as=\"ul\"\n          listStyleType=\"none\"\n          zIndex=\"3\"\n          overflow=\"auto\"\n          {...rest}\n        >\n          {options.map((it) => (\n            <Button\n              key={it.key}\n              variant=\"ghost\"\n              width=\"100%\"\n              justifyContent=\"start\"\n              onClick={() => onSelectOption(it)}\n            >\n              {it.value}\n            </Button>\n          ))}\n        </Box>\n      )}\n    </>\n  );\n}\n\nexport const Menu = forwardRef(MenuComponent);\n","import { useRef, RefObject } from \"react\";\nimport {\n  Box,\n  InputGroup,\n  Input,\n  InputLeftElement,\n  InputRightElement,\n  BoxProps,\n  CircularProgress,\n} from \"@chakra-ui/react\";\nimport { ChevronDownIcon, CloseIcon, WarningIcon } from \"@chakra-ui/icons\";\n\nimport { useAutoCompleteState } from \"../hooks/use-autocomplete-state\";\n\nimport { Option } from \"../@types/option\";\n\nimport { DEFAULT_ICON_SIZE, SMALL_ICON_SIZE } from \"../constants/icon\";\n\nimport { Menu } from \"./menu\";\nimport { ConnectivityState } from \"../@types/connectivity\";\n\nexport interface AutoCompleteProps extends BoxProps {\n  connectivityState?: ConnectivityState;\n  options: Option<any>[];\n}\n\nexport function AutoComplete({\n  connectivityState = \"IDLE\",\n  options,\n  ...rest\n}: AutoCompleteProps) {\n  const ref = useRef() as RefObject<HTMLDivElement>;\n\n  const { value, isMenuOpen, reset, onChange, onSelectOption } =\n    useAutoCompleteState({ ref });\n\n  return (\n    <Box position=\"relative\" {...rest}>\n      <InputGroup>\n        {[\"LOADING\", \"FAILURE\"].includes(connectivityState) && (\n          <InputLeftElement>\n            {connectivityState === \"LOADING\" && (\n              <CircularProgress\n                isIndeterminate\n                size={DEFAULT_ICON_SIZE.w}\n                trackColor=\"transparent\"\n                color=\"blue.300\"\n              />\n            )}\n            {connectivityState === \"FAILURE\" && (\n              <WarningIcon {...DEFAULT_ICON_SIZE} color=\"red.300\" />\n            )}\n          </InputLeftElement>\n        )}\n        <Input value={value} onChange={onChange} />\n        <InputRightElement>\n          {!value ? (\n            <ChevronDownIcon {...SMALL_ICON_SIZE} />\n          ) : (\n            <CloseIcon {...SMALL_ICON_SIZE} cursor=\"pointer\" onClick={reset} />\n          )}\n        </InputRightElement>\n      </InputGroup>\n      <Menu\n        ref={ref}\n        options={options}\n        isOpen={isMenuOpen}\n        onSelectOption={onSelectOption}\n      />\n    </Box>\n  );\n}\n","import { RefObject, useState, useCallback, ChangeEvent } from \"react\";\nimport { useOutsideClick } from \"@chakra-ui/react\";\n\nimport { Option } from \"../@types/option\";\n\nexport type OnChangeEvent = ChangeEvent<HTMLInputElement>;\n\nexport interface UseAutoCompleteStateConfig<T extends RefObject<HTMLElement>> {\n  ref: T;\n}\n\nexport interface AutoCompleteState {\n  value: string;\n  isMenuOpen: boolean;\n  selected?: Option<any>;\n  onChange(event: OnChangeEvent): void;\n  onSelectOption(option: Option<any>): void;\n  reset(): void;\n}\n\nexport function useAutoCompleteState<T extends RefObject<HTMLElement>>({\n  ref,\n}: UseAutoCompleteStateConfig<T>): AutoCompleteState {\n  const [value, valueSet] = useState<string>(\"\");\n  const [selected, selectedSet] = useState<Option<any> | undefined>();\n  const [isMenuOpen, isMenuOpenSet] = useState<boolean>(false);\n\n  const onChange = useCallback(\n    (e: OnChangeEvent) => {\n      valueSet(e.target.value);\n      !isMenuOpen && isMenuOpenSet(true);\n    },\n    [isMenuOpen]\n  );\n\n  const onSelectOption = useCallback((option: Option<any>) => {\n    selectedSet(option);\n    valueSet(option.value);\n  }, []);\n\n  const reset = useCallback(() => {\n    valueSet(\"\");\n    selectedSet(undefined);\n  }, []);\n\n  useOutsideClick({\n    ref,\n    handler: () => isMenuOpenSet(false),\n  });\n\n  return {\n    value,\n    isMenuOpen,\n    selected,\n    onChange,\n    onSelectOption,\n    reset,\n  };\n}\n","import { useService, UseServiceConfig } from \"../hooks/use-service\";\n\nimport { AutoComplete, AutoCompleteProps } from \"./auto-complete\";\n\nexport interface AsyncAutoCompleteProps<T>\n  extends Omit<AutoCompleteProps, \"options\">,\n    UseServiceConfig<T> {\n  service: () => Promise<T>;\n}\n\nexport function AsyncAutoComplete<T>({\n  service,\n  execution,\n  toOptions,\n  onFailure,\n  ...rest\n}: AsyncAutoCompleteProps<T>) {\n  const { connectivityState, options } = useService(service, {\n    execution,\n    toOptions,\n    onFailure,\n  });\n\n  return (\n    <AutoComplete\n      connectivityState={connectivityState}\n      options={options}\n      {...rest}\n    />\n  );\n}\n","import { useState, useEffect, useCallback } from \"react\";\n\nimport { Option } from \"../@types/option\";\nimport { ConnectivityState } from \"../@types/connectivity\";\n\nexport type ExecutionMode = \"ON_MOUNT\" | \"WHEN_CALLED\";\n\nexport interface UseServiceConfig<T> {\n  execution?: ExecutionMode;\n  toOptions(response: T): Option<any>[];\n  onFailure?<T extends Error>(reason: T): void;\n}\n\nexport interface UseService<T> {\n  connectivityState: ConnectivityState;\n  options: Option<T>[];\n  execute(): Promise<void>;\n}\n\nexport function useService<T>(\n  executor: () => Promise<T>,\n  { execution = \"ON_MOUNT\", toOptions, onFailure }: UseServiceConfig<T>\n): UseService<T> {\n  const [connectivityState, connectivityStateSet] =\n    useState<ConnectivityState>(\"IDLE\");\n  const [options, optionsSet] = useState<Option<any>[]>([]);\n\n  const execute = useCallback(async () => {\n    connectivityStateSet(\"LOADING\");\n    try {\n      const response = await executor();\n      const asOptions = toOptions(response);\n      optionsSet(asOptions);\n    } catch (error) {\n      connectivityStateSet(\"FAILURE\");\n      onFailure && onFailure(error as Error);\n    } finally {\n      connectivityStateSet(\"IDLE\");\n    }\n  }, [executor, toOptions]);\n\n  useEffect(() => {\n    execution === \"ON_MOUNT\" && execute();\n  }, []);\n\n  return {\n    connectivityState,\n    options,\n    execute,\n  };\n}\n","import { Flex } from \"@chakra-ui/react\";\n\nimport { useService } from \"./hooks/use-service\";\n\nimport { wait } from \"./utils/promise\";\n\nimport { AsyncAutoComplete } from \"./components/async-auto-complete\";\n\nexport default function App() {\n  return (\n    <Flex\n      width=\"100vw\"\n      height=\"100vh\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <AsyncAutoComplete\n        service={() => wait([\"William\", \"Juliano\"])}\n        toOptions={(names) => names.map((it) => ({ key: it, value: it }))}\n      />\n    </Flex>\n  );\n}\n","export function wait<T>(value: T, timeout: number = 1000): Promise<T> {\n  return new Promise((resolve) => setTimeout(() => resolve(value), timeout));\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport { theme as dark } from \"./themes/dark\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={dark}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"names":["relList","document","createElement","supports","link","querySelectorAll","MutationObserver","mutations","mutation","type","node","addedNodes","tagName","rel","observe","childList","subtree","ep","fetchOpts","script","integrity","referrerpolicy","referrerPolicy","crossorigin","credentials","getFetchOpts","href","p","theme","extendTheme","config","initialColorMode","useSystemColorMode","SMALL_ICON_SIZE","w","h","DEFAULT_ICON_SIZE","Menu","forwardRef","_a","ref","isOpen","options","onSelectOption","_b","rest","Box","position","top","my","width","boxSizing","borderRadius","boxShadow","background","as","listStyleType","zIndex","overflow","map","Button","variant","justifyContent","onClick","it","value","key","_c","connectivityState","_d","useRef","isMenuOpen","reset","onChange","valueSet","useState","selected","selectedSet","isMenuOpenSet","useCallback","e","target","option","undefined","handler","useAutoCompleteState","InputGroup","includes","InputLeftElement","CircularProgress","isIndeterminate","size","trackColor","color","WarningIcon","Input","InputRightElement","CloseIcon","cursor","ChevronDownIcon","_e","service","execution","toOptions","onFailure","_f","executor","connectivityStateSet","optionsSet","execute","async","response","asOptions","error","useService","AutoComplete","Flex","height","alignItems","AsyncAutoComplete","timeout","Promise","setTimeout","resolve","wait","names","ReactDOM","render","React","StrictMode","ChakraProvider","App","getElementById"],"mappings":"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"}