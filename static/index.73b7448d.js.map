{"version":3,"file":"index.73b7448d.js","sources":["../../vite/modulepreload-polyfill","../../src/themes/dark.ts","../../src/utils/promise.ts","../../src/services/balde.ts","../../src/constants/icon.ts","../../src/components/connectivity-status.tsx","../../src/components/menu.tsx","../../src/components/auto-complete.tsx","../../src/hooks/use-autocomplete-state.ts","../../src/constants/keys.ts","../../src/components/async-auto-complete.tsx","../../src/hooks/use-service.ts","../../src/hooks/use-konami-code.ts","../../src/App.tsx","../../src/utils/mappers.ts","../../src/main.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { extendTheme } from \"@chakra-ui/react\";\n\nexport const theme = extendTheme({\n  config: {\n    initialColorMode: \"dark\",\n    useSystemColorMode: true,\n  },\n});\n","export function wait<T>(value: T, timeout: number = 1000): Promise<T> {\n  return new Promise((resolve) => setTimeout(() => resolve(value), timeout));\n}\n","import { wait } from \"../utils/promise\";\n\nexport function getMembers() {\n  return wait(\n    [\"William\", \"Juliano\", \"Matheus\", \"Ig√£o\", \"Italo\", \"Zaza\", \"Clebinho\"],\n    2000\n  );\n}\n","export const SMALL_ICON_SIZE = {\n  w: \"12px\",\n  h: \"12px\",\n};\n\nexport const DEFAULT_ICON_SIZE = {\n  w: \"16px\",\n  h: \"16px\",\n};\n","import { Fragment } from \"react\";\nimport { CircularProgress, InputLeftElement } from \"@chakra-ui/react\";\nimport { WarningIcon } from \"@chakra-ui/icons\";\n\nimport { ConnectivityState } from \"../@types/connectivity\";\n\nimport { DEFAULT_ICON_SIZE } from \"../constants/icon\";\n\nexport interface ConnectivityStatusProps {\n  connectivityState: ConnectivityState;\n}\n\nexport function ConnectivityStatus({\n  connectivityState,\n}: ConnectivityStatusProps) {\n  return (\n    <Fragment>\n      {[\"LOADING\", \"FAILURE\"].includes(connectivityState) && (\n        <InputLeftElement>\n          {connectivityState === \"LOADING\" && (\n            <CircularProgress\n              isIndeterminate\n              size={DEFAULT_ICON_SIZE.w}\n              trackColor=\"transparent\"\n              color=\"blue.300\"\n            />\n          )}\n          {connectivityState === \"FAILURE\" && (\n            <WarningIcon {...DEFAULT_ICON_SIZE} color=\"red.300\" />\n          )}\n        </InputLeftElement>\n      )}\n    </Fragment>\n  );\n}\n","import { forwardRef, ForwardedRef, useMemo, Fragment } from \"react\";\nimport { Box, Button, BoxProps } from \"@chakra-ui/react\";\n\nimport { Option } from \"../@types/option\";\n\nexport interface MenuProps extends BoxProps {\n  isOpen?: boolean;\n  options?: Option<any>[];\n  onSelectOption?(option: Option<any>): void;\n}\n\nfunction MenuComponent(\n  {\n    isOpen = false,\n    options = [],\n    onSelectOption = () => {},\n    ...rest\n  }: MenuProps,\n  ref: ForwardedRef<HTMLDivElement>\n) {\n  const shouldAppear = useMemo(\n    () => isOpen && options.length > 0,\n    [isOpen, options]\n  );\n\n  return (\n    <Fragment>\n      {shouldAppear && (\n        <Box\n          ref={ref}\n          position=\"absolute\"\n          top=\"100%\"\n          my=\"6px\"\n          width=\"100%\"\n          boxSizing=\"border-box\"\n          borderRadius=\"6px\"\n          boxShadow=\"0 0 0 1px hsl(0deg 0% 0% / 10%), 0 4px 11px hsl(0deg 0% 0% / 10%)\"\n          background=\"gray.700\"\n          as=\"ul\"\n          listStyleType=\"none\"\n          zIndex=\"3\"\n          overflow=\"auto\"\n          {...rest}\n        >\n          {options.map((it) => (\n            <Button\n              key={it.key}\n              variant=\"ghost\"\n              width=\"100%\"\n              justifyContent=\"start\"\n              onClick={() => onSelectOption(it)}\n            >\n              {it.value}\n            </Button>\n          ))}\n        </Box>\n      )}\n    </Fragment>\n  );\n}\n\nexport const Menu = forwardRef(MenuComponent);\n","import {\n  useRef,\n  RefObject,\n  forwardRef,\n  ForwardedRef,\n  FunctionComponent,\n} from \"react\";\nimport {\n  Box,\n  InputGroup,\n  Input,\n  InputLeftElement,\n  InputRightElement,\n  BoxProps,\n} from \"@chakra-ui/react\";\nimport { ChevronDownIcon, CloseIcon } from \"@chakra-ui/icons\";\n\nimport { useAutoCompleteState } from \"../hooks/use-autocomplete-state\";\n\nimport { Option } from \"../@types/option\";\n\nimport { SMALL_ICON_SIZE } from \"../constants/icon\";\n\nimport { Menu } from \"./menu\";\n\nexport interface RightComponentProps {\n  value: string;\n}\n\nexport interface AutoCompleteProps extends BoxProps {\n  options: Option<any>[];\n  LeftComponent?: FunctionComponent;\n  RightComponent?: FunctionComponent<RightComponentProps>;\n}\n\nfunction AutoCompleteComponent(\n  { LeftComponent, RightComponent, options, ...rest }: AutoCompleteProps,\n  inputRef: ForwardedRef<HTMLInputElement>\n) {\n  const menuRef = useRef() as RefObject<HTMLDivElement>;\n\n  const { value, isMenuOpen, reset, onChange, onSelectOption } =\n    useAutoCompleteState({\n      ref: menuRef,\n    });\n\n  return (\n    <Box position=\"relative\" {...rest}>\n      <InputGroup>\n        {LeftComponent && <LeftComponent />}\n        <Input ref={inputRef} value={value} onChange={onChange} />\n        <InputRightElement>\n          {RightComponent ? (\n            <RightComponent value={value} />\n          ) : !value ? (\n            <ChevronDownIcon {...SMALL_ICON_SIZE} />\n          ) : (\n            <CloseIcon {...SMALL_ICON_SIZE} cursor=\"pointer\" onClick={reset} />\n          )}\n        </InputRightElement>\n      </InputGroup>\n      <Menu\n        ref={menuRef}\n        options={options}\n        isOpen={isMenuOpen}\n        onSelectOption={onSelectOption}\n      />\n    </Box>\n  );\n}\n\nexport const AutoComplete = forwardRef(AutoCompleteComponent);\n","import { RefObject, useState, useCallback, ChangeEvent } from \"react\";\nimport { useOutsideClick } from \"@chakra-ui/react\";\n\nimport { Option } from \"../@types/option\";\n\nexport type OnChangeEvent = ChangeEvent<HTMLInputElement>;\n\nexport interface UseAutoCompleteStateConfig<T extends RefObject<HTMLElement>> {\n  ref: T;\n}\n\nexport interface AutoCompleteState {\n  value: string;\n  isMenuOpen: boolean;\n  selected?: Option<any>;\n  onChange(event: OnChangeEvent): void;\n  onSelectOption(option: Option<any>): void;\n  reset(): void;\n}\n\nexport function useAutoCompleteState<T extends RefObject<HTMLElement>>({\n  ref,\n}: UseAutoCompleteStateConfig<T>): AutoCompleteState {\n  const [value, valueSet] = useState<string>(\"\");\n  const [selected, selectedSet] = useState<Option<any> | undefined>();\n  const [isMenuOpen, isMenuOpenSet] = useState<boolean>(false);\n\n  const onChange = useCallback(\n    (e: OnChangeEvent) => {\n      valueSet(e.target.value);\n      !isMenuOpen && isMenuOpenSet(true);\n    },\n    [isMenuOpen]\n  );\n\n  const onSelectOption = useCallback((option: Option<any>) => {\n    selectedSet(option);\n    valueSet(option.value);\n  }, []);\n\n  const reset = useCallback(() => {\n    valueSet(\"\");\n    selectedSet(undefined);\n  }, []);\n\n  useOutsideClick({\n    ref,\n    handler: () => isMenuOpenSet(false),\n  });\n\n  return {\n    value,\n    isMenuOpen,\n    selected,\n    onChange,\n    onSelectOption,\n    reset,\n  };\n}\n","export enum KeyboardKey {\n  UP = \"UP\",\n  DOWN = \"DOWN\",\n  LEFT = \"LEFT\",\n  RIGHT = \"RIGHT\",\n}\n\nexport type Keys = keyof typeof KeyboardKey;\n\nexport type MappedKeys = {\n  [key in Keys]: number;\n};\n\nexport const KEYS: MappedKeys = {\n  [KeyboardKey.UP]: 38,\n  [KeyboardKey.DOWN]: 40,\n  [KeyboardKey.LEFT]: 37,\n  [KeyboardKey.RIGHT]: 39,\n};\n\nexport const KONAMI_SEQUENCE = [\n  KEYS.UP,\n  KEYS.UP,\n  KEYS.LEFT,\n  KEYS.RIGHT,\n  KEYS.DOWN,\n  KEYS.DOWN,\n];\n","import {\n  ServiceLifecycle,\n  ServiceMappers,\n  useService,\n  UseServiceConfig,\n} from \"../hooks/use-service\";\n\nimport { useKonamiCode } from \"../hooks/use-konami-code\";\n\nimport { ConnectivityStatus } from \"./connectivity-status\";\nimport { AutoComplete, AutoCompleteProps } from \"./auto-complete\";\nimport { KONAMI_SEQUENCE } from \"../constants/keys\";\nexport interface AsyncAutoCompleteProps<T>\n  extends Omit<AutoCompleteProps, \"options\">,\n    Omit<UseServiceConfig<T>, \"lifecycle\" | \"mappers\">,\n    ServiceMappers<T>,\n    ServiceLifecycle<T> {\n  service: () => Promise<T>;\n}\n\nexport function AsyncAutoComplete<T>({\n  service,\n  execution,\n  onMapToOptions,\n  onLoading,\n  onSuccess,\n  onFailure,\n  ...rest\n}: AsyncAutoCompleteProps<T>) {\n  const { connectivityState, options, execute } = useService(service, {\n    execution,\n    mappers: {\n      onMapToOptions,\n    },\n    lifecycle: {\n      onLoading,\n      onSuccess,\n      onFailure,\n    },\n  });\n\n  useKonamiCode(execute, { sequence: KONAMI_SEQUENCE });\n\n  return (\n    <AutoComplete\n      LeftComponent={() => (\n        <ConnectivityStatus connectivityState={connectivityState} />\n      )}\n      options={options}\n      {...rest}\n    />\n  );\n}\n","import { useState, useEffect, useCallback } from \"react\";\n\nimport { Option } from \"../@types/option\";\nimport { ConnectivityState } from \"../@types/connectivity\";\n\nexport type ExecutionMode = \"ON_MOUNT\" | \"WHEN_CALLED\";\n\nexport interface ServiceMappers<T> {\n  onMapToOptions(value: T): Option<any>[];\n}\n\nexport interface ServiceLifecycle<T> {\n  onLoading?(): void;\n  onSuccess?(response: T): void;\n  onFailure?<T extends Error>(reason: T): void;\n}\n\nexport interface UseServiceConfig<T> {\n  execution?: ExecutionMode;\n  mappers: ServiceMappers<T>;\n  lifecycle: ServiceLifecycle<T>;\n}\n\nexport interface UseService<T> {\n  connectivityState: ConnectivityState;\n  options: Option<T>[];\n  execute(): Promise<void>;\n}\n\nexport function useService<T>(\n  executor: () => Promise<T>,\n  {\n    execution = \"ON_MOUNT\",\n    mappers: { onMapToOptions },\n    lifecycle: { onLoading, onSuccess, onFailure },\n  }: UseServiceConfig<T>\n): UseService<T> {\n  const [connectivityState, connectivityStateSet] =\n    useState<ConnectivityState>(\"IDLE\");\n  const [options, optionsSet] = useState<Option<any>[]>([]);\n\n  const execute = useCallback(async () => {\n    connectivityStateSet(\"LOADING\");\n    onLoading && onLoading();\n    try {\n      const response = await executor();\n      const options = onMapToOptions(response);\n      optionsSet(options);\n      connectivityStateSet(\"SUCCESSFUL\");\n      onSuccess && onSuccess(response);\n    } catch (error) {\n      connectivityStateSet(\"FAILURE\");\n      onFailure && onFailure(error as Error);\n    }\n  }, [executor, onMapToOptions, onLoading, onSuccess, onFailure]);\n\n  useEffect(() => {\n    execution === \"ON_MOUNT\" && execute();\n  }, []);\n\n  return {\n    connectivityState,\n    options,\n    execute,\n  };\n}\n","import { useState, useEffect, useMemo, useCallback } from \"react\";\n\nexport interface UseKonamiCodeConfig {\n  sequence: number[];\n}\n\nexport function useKonamiCode(\n  fn: () => void,\n  { sequence }: UseKonamiCodeConfig\n) {\n  const [typedSequence, typedSequenceSet] = useState<number[]>([]);\n\n  const hasTypedAllCharacters = useMemo(\n    () => sequence.length === typedSequence.length,\n    [sequence, typedSequence]\n  );\n\n  const typedSequenceMatchesWithSequence = useMemo(\n    () =>\n      typedSequence.reduce(\n        (previous, current, index) => previous && sequence[index] === current,\n        true\n      ),\n    [typedSequence, sequence]\n  );\n\n  const listener = useCallback(\n    (event: KeyboardEvent) =>\n      sequence.includes(event.keyCode) &&\n      typedSequenceSet((latest) => [...latest, event.keyCode]),\n    [sequence]\n  );\n\n  console.log({ typedSequence });\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", listener);\n    return () => window.removeEventListener(\"keydown\", listener);\n  }, [listener]);\n\n  useEffect(() => {\n    if (hasTypedAllCharacters) {\n      typedSequenceMatchesWithSequence && fn();\n      typedSequenceSet([]);\n    }\n  }, [hasTypedAllCharacters, typedSequenceMatchesWithSequence, fn]);\n}\n","import { Flex } from \"@chakra-ui/react\";\n\nimport { onMapNamesToOptions } from \"./utils/mappers\";\n\nimport { getMembers } from \"./services/balde\";\n\nimport { AsyncAutoComplete } from \"./components/async-auto-complete\";\n\nexport default function App() {\n  return (\n    <Flex\n      width=\"100vw\"\n      height=\"100vh\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <AsyncAutoComplete\n        service={() => getMembers()}\n        onMapToOptions={(names) => onMapNamesToOptions(names)}\n        onLoading={() => console.log(\"onLoading\")}\n        onSuccess={(response) =>\n          console.log(`onSuccess: ${JSON.stringify(response)}`)\n        }\n        onFailure={() => console.log(\"onFailure\")}\n      />\n    </Flex>\n  );\n}\n","import { Option } from \"../@types/option\";\n\nexport function onMapNamesToOptions(names: string[]): Option<string>[] {\n  return names.map((it) => ({ key: it, value: it }));\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport { theme as dark } from \"./themes/dark\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={dark}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"names":["relList","document","createElement","supports","link","querySelectorAll","MutationObserver","mutations","mutation","type","node","addedNodes","tagName","rel","observe","childList","subtree","ep","fetchOpts","script","integrity","referrerpolicy","referrerPolicy","crossorigin","credentials","getFetchOpts","href","p","theme","extendTheme","config","initialColorMode","useSystemColorMode","value","timeout","Promise","setTimeout","resolve","wait","SMALL_ICON_SIZE","w","h","DEFAULT_ICON_SIZE","connectivityState","Fragment","includes","InputLeftElement","CircularProgress","isIndeterminate","size","trackColor","color","WarningIcon","Menu","forwardRef","_a","ref","isOpen","options","onSelectOption","_b","rest","shouldAppear","useMemo","length","Box","position","top","my","width","boxSizing","borderRadius","boxShadow","background","as","listStyleType","zIndex","overflow","map","Button","variant","justifyContent","onClick","it","key","AutoComplete","_c","inputRef","LeftComponent","RightComponent","_d","menuRef","useRef","isMenuOpen","reset","onChange","valueSet","useState","selected","selectedSet","isMenuOpenSet","useCallback","e","target","option","undefined","handler","useAutoCompleteState","InputGroup","Input","InputRightElement","CloseIcon","cursor","ChevronDownIcon","KeyboardKey","KEYS","UP","DOWN","LEFT","RIGHT","KONAMI_SEQUENCE","_e","service","execution","onMapToOptions","onLoading","onSuccess","onFailure","_f","execute","executor","mappers","lifecycle","connectivityStateSet","optionsSet","async","response","error","useService","fn","sequence","typedSequence","typedSequenceSet","hasTypedAllCharacters","typedSequenceMatchesWithSequence","reduce","previous","current","index","listener","event","keyCode","latest","log","addEventListener","window","removeEventListener","ConnectivityStatus","Flex","height","alignItems","AsyncAutoComplete","getMembers","names","onMapNamesToOptions","console","JSON","stringify","ReactDOM","render","React","StrictMode","ChakraProvider","App","getElementById"],"mappings":"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"}