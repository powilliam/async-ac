{"version":3,"file":"index.f55b216e.js","sources":["../../vite/modulepreload-polyfill","../../src/themes/dark.ts","../../src/constants/balde.ts","../../src/services/balde.ts","../../src/utils/promise.ts","../../src/hooks/use-paging-source.ts","../../src/constants/keys.ts","../../src/constants/icon.ts","../../src/components/connectivity-status.tsx","../../src/components/menu.tsx","../../src/components/auto-complete.tsx","../../src/hooks/use-auto-complete-state.ts","../../src/components/async-auto-complete.tsx","../../src/hooks/use-auto-complete-service.ts","../../src/hooks/use-on-scroll.ts","../../src/hooks/use-konami-code.ts","../../src/App.tsx","../../src/utils/mappers.ts","../../src/main.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { extendTheme } from \"@chakra-ui/react\";\n\nexport const theme = extendTheme({\n  config: {\n    initialColorMode: \"dark\",\n    useSystemColorMode: true,\n  },\n});\n","export interface Pagination {\n  page: number;\n  nextPage?: number;\n  previousPage?: number;\n}\nexport interface PaginatedMembers {\n  pagination: Pagination;\n  members: string[];\n}\n\nexport const MEMBERS = [\n  \"William\",\n  \"Juliano\",\n  \"Matheus\",\n  \"Igão\",\n  \"Italo\",\n  \"Zaza\",\n  \"Clebinho\",\n];\n\nexport const PAGINATED_MEMBERS: Record<number, PaginatedMembers> = {\n  1: {\n    pagination: { page: 1, nextPage: 2 },\n    members: [\"William\", \"Juliano\", \"Matheus\", \"Igão\", \"Italo\"],\n  },\n  2: {\n    pagination: { page: 2, previousPage: 1 },\n    members: [\"Zaza\", \"Clebinho\"],\n  },\n};\n","import { PagingSourceResult, PagingSourceState } from \"../@types/paging-source\";\nimport { MEMBERS, PAGINATED_MEMBERS } from \"../constants/balde\";\n\nimport { wait } from \"../utils/promise\";\n\nexport function getMembers() {\n  return wait(MEMBERS, 2000);\n}\n\nexport async function getPaginatedMembers(\n  previousState: PagingSourceState<number>\n): Promise<PagingSourceResult<number, string[]>> {\n  const page = previousState.nextKey ?? 1;\n  const response = await wait(PAGINATED_MEMBERS[page], 2000);\n  return {\n    data: response.members,\n    state: {\n      nextKey: response.pagination.nextPage,\n      previousKey: response.pagination.previousPage,\n      hasReachedTheEnd: !response.pagination.nextPage,\n    },\n  };\n}\n","export function wait<T>(value: T, timeout: number = 1000): Promise<T> {\n  return new Promise((resolve) => setTimeout(() => resolve(value), timeout));\n}\n","import { useRef, useCallback } from \"react\";\n\nimport {\n  PagingSourceService,\n  PagingSourceState,\n  ServicePagingSource,\n} from \"../@types/paging-source\";\n\nconst initialPagingSourceState = {\n  hasReachedTheEnd: false,\n};\n\nexport function usePagingSource<T, K>(\n  pagingSourceService: PagingSourceService<T, K>\n): ServicePagingSource<T, K> {\n  const pagingSourceState = useRef<PagingSourceState<T>>(\n    initialPagingSourceState\n  );\n\n  const service = useCallback(async () => {\n    const { state, data } = await pagingSourceService(\n      pagingSourceState.current\n    );\n    pagingSourceState.current = state;\n    return data;\n  }, [pagingSourceService, pagingSourceState]);\n\n  return {\n    state: pagingSourceState.current,\n    service,\n  };\n}\n","export enum KeyboardKey {\n  UP = \"UP\",\n  DOWN = \"DOWN\",\n  LEFT = \"LEFT\",\n  RIGHT = \"RIGHT\",\n}\n\nexport type Keys = keyof typeof KeyboardKey;\n\nexport type MappedKeys = {\n  [key in Keys]: number;\n};\n\nexport const KEYS: MappedKeys = {\n  [KeyboardKey.UP]: 38,\n  [KeyboardKey.DOWN]: 40,\n  [KeyboardKey.LEFT]: 37,\n  [KeyboardKey.RIGHT]: 39,\n};\n\nexport const KONAMI_SEQUENCE = [\n  KEYS.UP,\n  KEYS.UP,\n  KEYS.LEFT,\n  KEYS.RIGHT,\n  KEYS.DOWN,\n  KEYS.DOWN,\n];\n","export const SMALL_ICON_SIZE = {\n  w: \"12px\",\n  h: \"12px\",\n};\n\nexport const DEFAULT_ICON_SIZE = {\n  w: \"16px\",\n  h: \"16px\",\n};\n","import { Fragment } from \"react\";\nimport { CircularProgress } from \"@chakra-ui/react\";\nimport { WarningIcon, EditIcon } from \"@chakra-ui/icons\";\n\nimport { ConnectivityState } from \"../@types/connectivity\";\n\nimport { DEFAULT_ICON_SIZE } from \"../constants/icon\";\n\nexport interface ConnectivityStatusProps {\n  connectivityState: ConnectivityState;\n}\n\nexport function ConnectivityStatus({\n  connectivityState,\n}: ConnectivityStatusProps) {\n  return (\n    <Fragment>\n      {[\"IDLE\", \"SUCCESSFUL\"].includes(connectivityState) && (\n        <EditIcon {...DEFAULT_ICON_SIZE} />\n      )}\n\n      {connectivityState === \"LOADING\" && (\n        <CircularProgress\n          isIndeterminate\n          size={DEFAULT_ICON_SIZE.w}\n          trackColor=\"transparent\"\n          color=\"blue.300\"\n        />\n      )}\n      {connectivityState === \"FAILURE\" && (\n        <WarningIcon {...DEFAULT_ICON_SIZE} color=\"red.300\" />\n      )}\n    </Fragment>\n  );\n}\n","import { forwardRef, ForwardedRef, useMemo, Fragment } from \"react\";\nimport { Box, Button, BoxProps } from \"@chakra-ui/react\";\nimport { CheckIcon } from \"@chakra-ui/icons\";\n\nimport { SMALL_ICON_SIZE } from \"../constants/icon\";\n\nimport { Option } from \"../@types/option\";\n\nconst DEFAULT_BUTTON_SIZE = 40;\nconst MAX_NUMBER_OF_BUTTONS = 4;\n\nexport interface MenuProps extends BoxProps {\n  isOpen?: boolean;\n  selected?: Option<any>;\n  options?: Option<any>[];\n  onSelectOption?(option: Option<any>): void;\n}\n\nfunction MenuComponent(\n  {\n    isOpen = false,\n    selected,\n    options = [],\n    onSelectOption = () => {},\n    ...rest\n  }: MenuProps,\n  ref: ForwardedRef<HTMLDivElement>\n) {\n  const height = useMemo(\n    () => ({\n      maxHeight:\n        options.length >= MAX_NUMBER_OF_BUTTONS\n          ? `${MAX_NUMBER_OF_BUTTONS * DEFAULT_BUTTON_SIZE}px`\n          : undefined,\n    }),\n    [options]\n  );\n\n  const shouldAppear = useMemo(\n    () => isOpen && options.length > 0,\n    [isOpen, options]\n  );\n\n  return (\n    <Fragment>\n      {shouldAppear && (\n        <Box\n          ref={ref}\n          position=\"absolute\"\n          top=\"100%\"\n          my=\"6px\"\n          width=\"100%\"\n          boxSizing=\"border-box\"\n          borderRadius=\"6px\"\n          boxShadow=\"0 0 0 1px hsl(0deg 0% 0% / 10%), 0 4px 11px hsl(0deg 0% 0% / 10%)\"\n          background=\"gray.700\"\n          as=\"ul\"\n          listStyleType=\"none\"\n          zIndex=\"3\"\n          overflow=\"scroll\"\n          {...height}\n          {...rest}\n        >\n          {options.map((it) => (\n            <Button\n              key={it.key}\n              variant=\"ghost\"\n              width=\"100%\"\n              justifyContent=\"space-between\"\n              onClick={() => onSelectOption(it)}\n            >\n              {it.value}\n              {selected === it && <CheckIcon {...SMALL_ICON_SIZE} />}\n            </Button>\n          ))}\n        </Box>\n      )}\n    </Fragment>\n  );\n}\n\nexport const Menu = forwardRef(MenuComponent);\n","import {\n  useRef,\n  RefObject,\n  forwardRef,\n  ForwardedRef,\n  FunctionComponent,\n} from \"react\";\nimport {\n  Box,\n  InputGroup,\n  Input,\n  InputLeftElement,\n  InputRightElement,\n  BoxProps,\n} from \"@chakra-ui/react\";\nimport { ChevronDownIcon, CloseIcon } from \"@chakra-ui/icons\";\n\nimport {\n  AutoCompleteState,\n  useAutoCompleteState,\n} from \"../hooks/use-auto-complete-state\";\n\nimport { Option } from \"../@types/option\";\n\nimport { SMALL_ICON_SIZE } from \"../constants/icon\";\n\nimport { Menu } from \"./menu\";\n\nexport type PositionalComponent = FunctionComponent<Partial<AutoCompleteState>>;\n\nexport interface AutoCompleteProps\n  extends BoxProps,\n    Partial<Omit<AutoCompleteState, \"onResetState\">> {\n  options: Option<any>[];\n  LeftComponent?: PositionalComponent;\n  RightComponent?: PositionalComponent;\n}\n\nfunction AutoCompleteComponent(\n  {\n    LeftComponent,\n    RightComponent,\n    options,\n    value,\n    selected,\n    isMenuOpen,\n    onInputFocus,\n    onChangeValue,\n    onSelectOption,\n    onScroll,\n    ...rest\n  }: AutoCompleteProps,\n  inputRef: ForwardedRef<HTMLInputElement>\n) {\n  const menuRef = useRef() as RefObject<HTMLDivElement>;\n\n  const state = useAutoCompleteState({\n    ref: menuRef,\n    value,\n    selected,\n    isMenuOpen,\n    onInputFocus,\n    onChangeValue,\n    onSelectOption,\n  });\n\n  return (\n    <Box position=\"relative\" {...rest}>\n      <InputGroup>\n        <InputLeftElement>\n          {LeftComponent && <LeftComponent {...state} />}\n        </InputLeftElement>\n        <Input\n          ref={inputRef}\n          value={state.value}\n          onChange={(e) => state.onChangeValue(e.target.value)}\n          onFocus={state.onInputFocus}\n        />\n        <InputRightElement>\n          {RightComponent ? (\n            <RightComponent {...state} />\n          ) : !state.value ? (\n            <ChevronDownIcon {...SMALL_ICON_SIZE} />\n          ) : (\n            <CloseIcon\n              {...SMALL_ICON_SIZE}\n              cursor=\"pointer\"\n              onClick={state.onResetState}\n            />\n          )}\n        </InputRightElement>\n      </InputGroup>\n      <Menu\n        ref={menuRef}\n        selected={state.selected}\n        options={options}\n        isOpen={state.isMenuOpen}\n        onSelectOption={state.onSelectOption}\n        onScroll={onScroll}\n      />\n    </Box>\n  );\n}\n\nexport const AutoComplete = forwardRef(AutoCompleteComponent);\n","import { RefObject, useState, useCallback, FocusEventHandler } from \"react\";\nimport { useOutsideClick } from \"@chakra-ui/react\";\n\nimport { Option } from \"../@types/option\";\n\nexport interface UseAutoCompleteStateConfig<T extends RefObject<HTMLElement>>\n  extends Partial<Omit<AutoCompleteState, \"onResetState\">> {\n  ref: T;\n}\n\nexport interface AutoCompleteState {\n  value: string;\n  isMenuOpen: boolean;\n  selected?: Option<any>;\n  onInputFocus: FocusEventHandler<HTMLInputElement>;\n  onChangeValue: (value: string) => void;\n  onSelectOption(option: Option<any>): void;\n  onResetState(): void;\n}\n\nexport function useAutoCompleteState<T extends RefObject<HTMLElement>>({\n  ref,\n  value: propsValue,\n  isMenuOpen: propsIsMenuOpen,\n  selected: propsSelected,\n  onInputFocus: propsOnFocus,\n  onChangeValue: propsOnChange,\n  onSelectOption: propsOnSelectOption,\n}: UseAutoCompleteStateConfig<T>): AutoCompleteState {\n  const [value, valueSet] = useState<string>(\"\");\n  const [selected, selectedSet] = useState<Option<any> | undefined>();\n  const [isMenuOpen, isMenuOpenSet] = useState<boolean>(false);\n\n  const onInputFocus = useCallback<FocusEventHandler<HTMLInputElement>>(\n    (e) => {\n      !!propsOnFocus && propsOnFocus(e);\n      !isMenuOpen && isMenuOpenSet(true);\n    },\n    [isMenuOpen, propsOnFocus]\n  );\n\n  const onChangeValue = useCallback(\n    (value) => {\n      !!propsOnChange ? propsOnChange(value) : valueSet(value);\n      !isMenuOpen && isMenuOpenSet(true);\n    },\n    [isMenuOpen, propsOnChange]\n  );\n\n  const onSelectOption = useCallback(\n    (option: Option<any>) => {\n      !!propsOnSelectOption ? propsOnSelectOption(option) : selectedSet(option);\n      !!propsOnChange ? propsOnChange(option.value) : valueSet(option.value);\n      isMenuOpen && isMenuOpenSet(false);\n    },\n    [isMenuOpen, propsOnSelectOption, propsOnChange]\n  );\n\n  const onResetState = useCallback(() => {\n    valueSet(\"\");\n    selectedSet(undefined);\n    isMenuOpen && isMenuOpenSet(false);\n  }, [isMenuOpenSet]);\n\n  useOutsideClick({\n    ref,\n    handler: () => isMenuOpenSet(false),\n    enabled: isMenuOpen,\n  });\n\n  return {\n    value: propsValue ?? value,\n    isMenuOpen: propsIsMenuOpen ?? isMenuOpen,\n    selected: propsSelected ?? selected,\n    onInputFocus,\n    onChangeValue,\n    onSelectOption,\n    onResetState,\n  };\n}\n","import { forwardRef, ForwardedRef } from \"react\";\n\nimport { useAutoCompleteService } from \"../hooks/use-auto-complete-service\";\nimport { useKonamiCode } from \"../hooks/use-konami-code\";\nimport { usePagingSource } from \"../hooks/use-paging-source\";\nimport { useOnScroll } from \"../hooks/use-on-scroll\";\n\nimport { KONAMI_SEQUENCE } from \"../constants/keys\";\n\nimport { PagingSourceService } from \"../@types/paging-source\";\nimport {\n  ServiceBehaviors,\n  ServiceConfig,\n  ServiceLifecycle,\n  ServiceMappers,\n} from \"../@types/auto-complete-service\";\n\nimport { ConnectivityStatus } from \"./connectivity-status\";\nimport { AutoComplete, AutoCompleteProps } from \"./auto-complete\";\n\nexport interface AsyncAutoCompleteProps<T, K>\n  extends Omit<AutoCompleteProps, \"options\">,\n    Omit<ServiceConfig<T>, \"lifecycle\" | \"mappers\" | \"behaviors\">,\n    ServiceMappers<T>,\n    ServiceLifecycle<T>,\n    ServiceBehaviors {\n  service: PagingSourceService<K, T>;\n}\n\nfunction AsyncAutoCompleteComponent<T, K>(\n  {\n    service: propsService,\n    paginated: propsPaginated = true,\n    onMapToOptions,\n    onLoading,\n    onSuccess,\n    onFailure,\n    ...rest\n  }: AsyncAutoCompleteProps<T, K>,\n  ref: ForwardedRef<HTMLInputElement>\n) {\n  const { state, service } = usePagingSource(propsService);\n\n  const { connectivityState, options, execute } = useAutoCompleteService(\n    service,\n    {\n      mappers: {\n        onMapToOptions,\n      },\n      lifecycle: {\n        onLoading,\n        onSuccess,\n        onFailure,\n      },\n      behaviors: {\n        paginated: propsPaginated,\n      },\n    }\n  );\n\n  const onScroll = useOnScroll(\n    async () => !state.hasReachedTheEnd && (await execute())\n  );\n\n  useKonamiCode(async () => !state.hasReachedTheEnd && (await execute()), {\n    sequence: KONAMI_SEQUENCE,\n  });\n\n  return (\n    <AutoComplete\n      ref={ref}\n      LeftComponent={() => (\n        <ConnectivityStatus connectivityState={connectivityState} />\n      )}\n      options={options}\n      onScroll={onScroll}\n      {...rest}\n    />\n  );\n}\n\nexport const AsyncAutoComplete = forwardRef(AsyncAutoCompleteComponent);\n","import { useState, useEffect, useCallback } from \"react\";\n\nimport { Option } from \"../@types/option\";\nimport { ConnectivityState } from \"../@types/connectivity\";\nimport {\n  ServiceConfig,\n  UseAutoCompleteService,\n} from \"../@types/auto-complete-service\";\n\nexport function useAutoCompleteService<T>(\n  executor: () => Promise<T>,\n  { mappers: { onMapToOptions }, lifecycle, behaviors }: ServiceConfig<T>\n): UseAutoCompleteService<T> {\n  const [connectivityState, connectivityStateSet] =\n    useState<ConnectivityState>(\"IDLE\");\n  const [options, optionsSet] = useState<Option<any>[]>([]);\n\n  const execute = useCallback(async () => {\n    connectivityStateSet(\"LOADING\");\n    lifecycle?.onLoading && lifecycle?.onLoading();\n    try {\n      const response = await executor();\n      const options = onMapToOptions(response);\n      optionsSet((previous) => [\n        ...(behaviors?.paginated ? previous : []),\n        ...options,\n      ]);\n      connectivityStateSet(\"SUCCESSFUL\");\n      lifecycle?.onSuccess && lifecycle?.onSuccess(response);\n    } catch (error) {\n      connectivityStateSet(\"FAILURE\");\n      lifecycle?.onFailure && lifecycle?.onFailure(error as Error);\n    }\n  }, [executor, onMapToOptions, lifecycle, behaviors]);\n\n  useEffect(() => {\n    execute();\n  }, []);\n\n  return {\n    connectivityState,\n    options,\n    execute,\n  };\n}\n","import { UIEvent as InterfaceEvent, useRef, useMemo, useCallback } from \"react\";\n\nexport type OnScrollFn<T, K extends HTMLElement> = (\n  event: InterfaceEvent<K, UIEvent>\n) => T;\n\nexport function useOnScroll<T, K extends HTMLElement>(\n  fn: () => T | Promise<T>\n): OnScrollFn<ReturnType<typeof fn>, K> {\n  const isCalling = useRef(false);\n\n  const hasReachedTheEnd = useCallback(\n    (event: InterfaceEvent<K, UIEvent>) =>\n      event.currentTarget.scrollHeight -\n        Math.abs(event.currentTarget.scrollTop) ===\n      event.currentTarget.clientHeight,\n    []\n  );\n\n  const call = useCallback(async () => {\n    try {\n      isCalling.current = true;\n      return await fn();\n    } catch (error) {\n      return {} as T;\n    } finally {\n      isCalling.current = false;\n    }\n  }, [isCalling, fn]);\n\n  return useCallback(\n    async (event) => {\n      return !isCalling.current && hasReachedTheEnd(event)\n        ? await call()\n        : ({} as T);\n    },\n    [isCalling, hasReachedTheEnd, call]\n  );\n}\n","import { useState, useEffect, useMemo, useCallback } from \"react\";\n\nexport interface UseKonamiCodeConfig {\n  sequence: number[];\n}\n\nexport function useKonamiCode(\n  fn: () => void,\n  { sequence }: UseKonamiCodeConfig\n) {\n  const [typedSequence, typedSequenceSet] = useState<number[]>([]);\n\n  const hasTypedAllCharacters = useMemo(\n    () => sequence.length === typedSequence.length,\n    [sequence, typedSequence]\n  );\n\n  const typedSequenceMatchesWithSequence = useMemo(\n    () =>\n      typedSequence.reduce(\n        (previous, current, index) => previous && sequence[index] === current,\n        true\n      ),\n    [typedSequence, sequence]\n  );\n\n  const listener = useCallback(\n    (event: KeyboardEvent) =>\n      sequence.includes(event.keyCode) &&\n      typedSequenceSet((latest) => [...latest, event.keyCode]),\n    [sequence]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", listener);\n    return () => window.removeEventListener(\"keydown\", listener);\n  }, [listener]);\n\n  useEffect(() => {\n    if (hasTypedAllCharacters) {\n      typedSequenceMatchesWithSequence && fn();\n      typedSequenceSet([]);\n    }\n  }, [hasTypedAllCharacters, typedSequenceMatchesWithSequence, fn]);\n}\n","import { Flex } from \"@chakra-ui/react\";\n\nimport { onMapNamesToOptions } from \"./utils/mappers\";\n\nimport { getPaginatedMembers } from \"./services/balde\";\n\nimport { AsyncAutoComplete } from \"./components/async-auto-complete\";\n\nexport default function App() {\n  return (\n    <Flex\n      width=\"100vw\"\n      height=\"100vh\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <AsyncAutoComplete\n        service={getPaginatedMembers}\n        onMapToOptions={(names) => onMapNamesToOptions(names)}\n        onLoading={() => console.log(\"onLoading\")}\n        onSuccess={(response) =>\n          console.log(`onSuccess: ${JSON.stringify(response)}`)\n        }\n        onFailure={(e) => console.log(`onFailure: ${e}`)}\n      />\n    </Flex>\n  );\n}\n","import { Option } from \"../@types/option\";\n\nexport function onMapNamesToOptions(names: string[]): Option<string>[] {\n  return names.map((it) => ({ key: it, value: it }));\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport { theme as dark } from \"./themes/dark\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={dark}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"names":["relList","document","createElement","supports","link","querySelectorAll","MutationObserver","mutations","mutation","type","node","addedNodes","tagName","rel","observe","childList","subtree","ep","fetchOpts","script","integrity","referrerpolicy","referrerPolicy","crossorigin","credentials","getFetchOpts","href","p","theme","extendTheme","config","initialColorMode","useSystemColorMode","PAGINATED_MEMBERS","pagination","page","nextPage","members","previousPage","previousState","nextKey","response","value","timeout","Promise","setTimeout","resolve","wait","data","state","previousKey","hasReachedTheEnd","initialPagingSourceState","KeyboardKey","KEYS","UP","DOWN","LEFT","RIGHT","KONAMI_SEQUENCE","SMALL_ICON_SIZE","w","h","DEFAULT_ICON_SIZE","connectivityState","Fragment","includes","EditIcon","CircularProgress","isIndeterminate","size","trackColor","color","WarningIcon","Menu","forwardRef","_a","ref","isOpen","selected","options","onSelectOption","_b","rest","height","useMemo","maxHeight","length","undefined","shouldAppear","Box","position","top","my","width","boxSizing","borderRadius","boxShadow","background","as","listStyleType","zIndex","overflow","map","Button","variant","justifyContent","onClick","it","CheckIcon","key","AutoComplete","_c","inputRef","LeftComponent","RightComponent","isMenuOpen","onInputFocus","onChangeValue","onScroll","_d","menuRef","useRef","propsValue","propsIsMenuOpen","propsSelected","propsOnFocus","propsOnChange","propsOnSelectOption","valueSet","useState","selectedSet","isMenuOpenSet","useCallback","e","option","onResetState","handler","enabled","useAutoCompleteState","InputGroup","InputLeftElement","Input","onChange","target","onFocus","InputRightElement","CloseIcon","cursor","ChevronDownIcon","AsyncAutoComplete","_e","propsService","paginated","propsPaginated","onMapToOptions","onLoading","onSuccess","onFailure","_f","service","pagingSourceService","pagingSourceState","async","current","usePagingSource","execute","executor","mappers","lifecycle","behaviors","connectivityStateSet","optionsSet","previous","error","useAutoCompleteService","fn","isCalling","event","currentTarget","scrollHeight","Math","abs","scrollTop","clientHeight","call","useOnScroll","sequence","typedSequence","typedSequenceSet","hasTypedAllCharacters","typedSequenceMatchesWithSequence","reduce","index","listener","keyCode","latest","addEventListener","window","removeEventListener","ConnectivityStatus","Flex","alignItems","getPaginatedMembers","names","onMapNamesToOptions","console","log","JSON","stringify","ReactDOM","render","React","StrictMode","ChakraProvider","App","getElementById"],"mappings":"ivBAAU,iBACAA,EAAUC,SAASC,cAAc,QAAQF,aAC3CA,GAAWA,EAAQG,UAAYH,EAAQG,SAAS,6BAGzCC,KAAQH,SAASI,iBAAiB,+BAC1BD,OAEfE,kBAAkBC,cACPC,KAAYD,KACG,cAAlBC,EAASC,eAGFC,KAAQF,EAASG,WACH,SAAjBD,EAAKE,SAAmC,kBAAbF,EAAKG,OACjBH,MAG5BI,QAAQb,SAAU,CAAEc,WAAW,EAAMC,SAAS,eAezBZ,MAChBA,EAAKa,YAGJA,IAAK,QAEJC,WApBYC,SACZD,EAAY,UACdC,EAAOC,cACGA,UAAYD,EAAOC,WAC7BD,EAAOE,mBACGC,eAAiBH,EAAOE,gBACX,oBAAvBF,EAAOI,cACGC,YAAc,UACI,cAAvBL,EAAOI,cACFC,YAAc,SAEdA,YAAc,cACrBN,EAQWO,CAAarB,SACzBA,EAAKsB,KAAMR,IAEvBS,SCxCWC,EAAQC,EAAY,CAC/BC,OAAQ,CACNC,iBAAkB,OAClBC,oBAAoB,WCeXC,EAAsD,GAC9D,CACDC,WAAY,CAAEC,KAAM,EAAGC,SAAU,GACjCC,QAAS,CAAC,UAAW,UAAW,UAAW,OAAQ,YAElD,CACDH,WAAY,CAAEC,KAAM,EAAGG,aAAc,GACrCD,QAAS,CAAC,OAAQ,+BCjBpBE,eAEMJ,EAAOI,WAAcC,WAAW,EAChCC,iBCbgBC,EAAUC,EAAkB,YAC3C,IAAIC,YAAqBC,YAAW,IAAMC,EAAQJ,IAAQC,KDY1CI,CAAKd,EAAkBE,GAAO,WAC9C,CACLa,KAAMP,EAASJ,QACfY,MAAO,CACLT,QAASC,EAASP,WAAWE,SAC7Bc,YAAaT,EAASP,WAAWI,aACjCa,kBAAmBV,EAASP,WAAWE,WEX7C,MAAMgB,EAA2B,CAC/BD,kBAAkB,OCTRE,EAAAA,GAAAA,EAAAA,cACL,YACE,cACA,eACC,cASGC,EAAmB,EAC7BD,EAAYE,IAAK,IACjBF,EAAYG,MAAO,IACnBH,EAAYI,MAAO,IACnBJ,EAAYK,OAAQ,IAGVC,EAAkB,CAC7BL,EAAKC,GACLD,EAAKC,GACLD,EAAKG,KACLH,EAAKI,MACLJ,EAAKE,KACLF,EAAKE,MC1BMI,EAAkB,CAC7BC,EAAG,OACHC,EAAG,QAGQC,EAAoB,CAC/BF,EAAG,OACHC,EAAG,oBCK8BE,kBACjCA,aAGGC,8BACE,CAAC,OAAQ,cAAcC,SAASF,MAC9BG,OAAaJ,IAGO,YAAtBC,KACEI,GACCC,mBACAC,KAAMP,EAAkBF,EACxBU,WAAW,cACXC,MAAM,aAGa,YAAtBR,KACES,SAAgBV,IAAmBS,MAAM,sBCmDrCE,EAAOC,sBA/DpB,SACEC,EAOAC,YANEC,UAAS,WACTC,UACAC,EAAU,kBACVC,EAAiB,UAJnBC,EAKKC,IALLD,EAKKC,CAJHL,SACAC,WACAC,UACAC,yBAKIG,EAASC,mBACb,MACEC,UACEN,EAAQO,QAtBc,EAuBjB,aACDC,KAER,CAACR,IAGGS,EAAeJ,mBACnB,IAAMP,GAAUE,EAAQO,OAAS,GACjC,CAACT,EAAQE,aAIRf,6BACEwB,KACEC,SACCb,IAAAA,EACAc,SAAS,WACTC,IAAI,OACJC,GAAG,MACHC,MAAM,OACNC,UAAU,aACVC,aAAa,MACbC,UAAU,oEACVC,WAAW,WACXC,GAAG,KACHC,cAAc,OACdC,OAAO,IACPC,SAAS,UACLlB,GACAD,aAEHH,EAAQuB,UACNC,GAECC,QAAQ,QACRX,MAAM,OACNY,eAAe,gBACfC,QAAS,IAAM1B,EAAe2B,aAE7BA,EAAGlE,MACHqC,IAAa6B,KAAOC,OAAcjD,MAP9BgD,EAAGE,qBCuCTC,EAAepC,sBAlE5B,SACEqC,EAaAC,YAZEC,+BACAC,UACAnC,QACAtC,WACAqC,aACAqC,eACAC,gBACAC,iBACArC,WACAsC,GAVFC,EAWKrC,IAXLqC,EAWKrC,CAVH+B,gBACAC,iBACAnC,UACAtC,QACAqC,WACAqC,aACAC,eACAC,gBACArC,iBACAsC,mBAKIE,EAAUC,mBAEVzE,YCpC+D4B,IACrEA,EACAnC,MAAOiF,EACPP,WAAYQ,EACZ7C,SAAU8C,EACVR,aAAcS,EACdR,cAAeS,EACf9C,eAAgB+C,UAETtF,EAAOuF,GAAYC,mBAAiB,KACpCnD,EAAUoD,GAAeD,sBACzBd,EAAYgB,GAAiBF,oBAAkB,GAEhDb,EAAegB,2BAEfP,GAAgBA,EAAaQ,IAC9BlB,GAAcgB,GAAc,KAE/B,CAAChB,EAAYU,IAGTR,EAAgBe,2BAEhBN,EAAgBA,EAAcrF,GAASuF,EAASvF,IACjD0E,GAAcgB,GAAc,KAE/B,CAAChB,EAAYW,IAGT9C,EAAiBoD,uBACpBE,IACGP,EAAsBA,EAAoBO,GAAUJ,EAAYI,GAChER,EAAgBA,EAAcQ,EAAO7F,OAASuF,EAASM,EAAO7F,UAClD0F,GAAc,KAE9B,CAAChB,EAAYY,EAAqBD,IAG9BS,EAAeH,uBAAY,OACtB,WACG7C,MACE4C,GAAc,KAC3B,CAACA,aAEY,CACdvD,IAAAA,EACA4D,QAAS,IAAML,GAAc,GAC7BM,QAAStB,IAGJ,CACL1E,YAAOiF,IAAcjF,EACrB0E,iBAAYQ,IAAmBR,EAC/BrC,eAAU8C,IAAiB9C,EAC3BsC,aAAAA,EACAC,cAAAA,EACArC,eAAAA,EACAuD,aAAAA,GDrBYG,CAAqB,CACjC9D,IAAK4C,EACL/E,MAAAA,EACAqC,SAAAA,EACAqC,WAAAA,EACAC,aAAAA,EACAC,cAAAA,EACArC,eAAAA,aAICS,OAAIC,SAAS,YAAeR,gBAC1ByD,eACEC,YACE3B,KAAkBA,OAAkBjE,QAEtC6F,GACCjE,IAAKoC,EACLvE,MAAOO,EAAMP,MACbqG,YAAiB9F,EAAMqE,cAAcgB,EAAEU,OAAOtG,OAC9CuG,QAAShG,EAAMoE,iBAEhB6B,YACE/B,IACEA,OAAmBlE,IACjBA,EAAMP,QAGRyG,SACKvF,IACJwF,OAAO,UACPzC,QAAS1D,EAAMuF,kBALhBa,OAAoBzF,WAU1Bc,GACCG,IAAK4C,EACL1C,SAAU9B,EAAM8B,SAChBC,QAAAA,EACAF,OAAQ7B,EAAMmE,WACdnC,eAAgBhC,EAAMgC,eACtBsC,SAAAA,iBEjBK+B,EAAoB3E,sBApDjC,SACE4E,EASA1E,oBARW2E,EACTC,UAAWC,GAAiB,iBAC5BC,YACAC,YACAC,YACAC,GANFC,EAOK5E,IAPL4E,EAOK5E,CANH6E,UACAP,YACAE,iBACAC,YACAC,YACAC,oBAKI7G,MAAEA,UAAO+G,YP5BfC,SAEMC,EAAoBxC,iBACxBtE,GAGI4G,EAAU3B,uBAAY8B,gBACpBlH,MAAEA,OAAOD,SAAeiH,EAC5BC,EAAkBE,kBAEFA,QAAUnH,EACrBD,IACN,CAACiH,EAAqBC,UAElB,CACLjH,MAAOiH,EAAkBE,QACzBJ,QAAAA,GOYyBK,CAAgBb,IAErCxF,kBAAEA,UAAmBgB,UAASsF,YCjCpCC,GACEC,SAASb,eAAEA,aAAkBc,YAAWC,UAEnC1G,EAAmB2G,GACxBzC,mBAA4B,SACvBlD,EAAS4F,GAAc1C,mBAAwB,IAEhDoC,EAAUjC,uBAAY8B,YACL,6BACVP,wBAAwBA,uBAE3BnH,QAAiB8H,IACjBvF,EAAU2E,EAAelH,SACN,sBACRgH,WAAYoB,EAAW,MACnC7F,OAEgB,gCACV6E,wBAAwBA,UAAUpH,UACtCqI,KACc,6BACVhB,wBAAwBA,UAAUgB,OAE9C,CAACP,EAAUZ,EAAgBc,EAAWC,gCAE/B,WAEP,IAEI,CACL1G,kBAAAA,EACAgB,QAAAA,EACAsF,QAAAA,GDC8CS,CAC9Cf,EACA,CACEQ,QAAS,CACPb,eAAAA,GAEFc,UAAW,CACTb,UAAAA,EACAC,UAAAA,EACAC,UAAAA,GAEFY,UAAW,CACTjB,UAAWC,KAKXnC,WErDNyD,SAEMC,EAAYvD,kBAAO,GAEnBvE,EAAmBkF,uBACtB6C,GACCA,EAAMC,cAAcC,aAClBC,KAAKC,IAAIJ,EAAMC,cAAcI,aAC/BL,EAAMC,cAAcK,cACtB,IAGIC,EAAOpD,uBAAY8B,uBAEXC,SAAU,QACPY,UACNF,SACA,aAEGV,SAAU,KAErB,CAACa,EAAWD,WAER3C,uBACL8B,MAAOe,IACGD,EAAUb,SAAWjH,EAAiB+H,SACpCO,IACL,IAEP,CAACR,EAAW9H,EAAkBsI,IFwBfC,EACfvB,UAAalH,EAAME,wBAA2BmH,sBGtDhDU,GACAW,SAAEA,UAEKC,EAAeC,GAAoB3D,mBAAmB,IAEvD4D,EAAwBzG,mBAC5B,IAAMsG,EAASpG,SAAWqG,EAAcrG,QACxC,CAACoG,EAAUC,IAGPG,EAAmC1G,mBACvC,IACEuG,EAAcI,QACZ,CAACnB,EAAUT,EAAS6B,IAAUpB,GAAYc,EAASM,KAAW7B,IAC9D,IAEJ,CAACwB,EAAeD,IAGZO,EAAW7D,uBACd6C,GACCS,EAASzH,SAASgH,EAAMiB,UACxBN,MAA6B,IAAIO,EAAQlB,EAAMiB,YACjD,CAACR,yBAGO,YACDU,iBAAiB,UAAWH,GAC5B,IAAMI,OAAOC,oBAAoB,UAAWL,KAClD,CAACA,yBAEM,KACJJ,OACkCd,MACnB,OAElB,CAACc,EAAuBC,EAAkCf,MHqB/Cb,UAAalH,EAAME,wBAA2BmH,KAAY,CACtEqB,SAAUhI,MAIToD,KACClC,IAAAA,EACAqC,cAAe,MACZsF,GAAmBxI,kBAAAA,IAEtBgB,QAAAA,EACAuC,SAAAA,GACIpC,6BIlELsH,GACC3G,MAAM,QACNV,OAAO,QACPsH,WAAW,SACXhG,eAAe,oBAEd4C,GACCU,QAAS2C,EACThD,2BChB4BiD,UAC3BA,EAAMrG,UAAeO,IAAKF,EAAIlE,MAAOkE,MDeXiG,CAAoBD,GAC/ChD,UAAW,IAAMkD,QAAQC,IAAI,aAC7BlD,aACEiD,QAAQC,IAAK,cAAaC,KAAKC,UAAUxK,MAE3CqH,aAAkBgD,QAAQC,IAAK,cAAazE,SEfpD4E,EAASC,SACNC,EAAMC,uBACJC,GAAe1L,MAAAA,aACb2L,UAGLtN,SAASuN,eAAe"}